<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">


<mapper namespace="net.musicrecommend.www.recommend.RecommendMapper">
	
	<insert id="insertRecommend" parameterType="RecommendVO">
		insert into tb_recommend(user_no, album_key, song_key, artist_key, star_point, comment)
		values(#{user_no},#{album_key},#{song_key},#{artist_key},#{star_point},#{comment})
		
	</insert>
	<update id="updateRecommend" parameterType="RecommendVO">
		update tb_recommend set star_point=#{star_point}, comment=#{comment}
		where user_no = #{user_no} and song_key = #{song_key}
	</update>
	
	<select id="checkRecommendExist" parameterType="RecommendVO" resultType="int">
		select count(user_no) as cnt from tb_recommend
		where user_no = #{user_no} and song_key = #{song_key}
	</select>
	<select id="getUserRecommendList" parameterType="long" resultType="RecommendVO">
	</select>
	
	<select id="getNullalbmSongs" resultType="SongVO">
		select song_key, song_name, artist_name from tb_song
	</select>
	<update id="insertNullalbum" parameterType="SongVO">
		update tb_song set album_name = #{album_name} where song_key = #{song_key}
	</update>
	
	
	
	<select id="checkCommentExist" parameterType="RecommendVO" resultType="int">
		select count(user_no) as cnt
		from tb_recommend
		where user_no = #{user_no} and song_key = #{song_key} and album_key = #{album_key} 
	</select>
	
	<update id="updateUserComment" parameterType="RecommendVO">
		update tb_recommend
		set user_comment = #{user_comment}
		where song_key = #{song_key} and user_no = #{user_no} and album_key = #{album_key}
	</update>
	
	
	
	<select id="getUseRecommendInfo" parameterType="long" resultType="RecommendVO">
		select *
		from tb_recommend
		where user_no = #{user_no}
	</select>
	
	<select id="getCommentList" parameterType="java.util.HashMap" resultType="RecommendUserVO">
	    select a.*
		from (select @RNUM := @RNUM + 1 as rownum, c.*
			  from (select r.*, u.user_nick, u.user_img, u.user_uuid, u.user_id
						from tb_recommend r join tb_user u
						on r.user_no = u.user_no
						where song_key = #{recommendVO.song_key} and album_key = #{recommendVO.album_key} and user_comment is not null) c join (select @RNUM := 0) rn
			  order by recommend_no desc) a
		where rownum between #{pgNation.start_num} and #{pgNation.end_num};
	</select>
	
	
	<select id="getStarPointSubtotal" parameterType="RecommendVO" resultType="DetailChartVO">
		select star_point, count(star_point) as cnt  
		from tb_recommend  
		where song_key = #{song_key} and album_key = #{album_key}
		group by star_point
	</select>
	
	<select id="getStarPointAvg" parameterType="RecommendVO" resultType="DetailChartVO">
		select avg(star_point) as avg_star_point, count(star_point) as cnt
		from tb_recommend
		where song_key = #{song_key} and album_key = #{album_key}
	</select>

	
	
	<!-- 상위검색어 10개 -->
 	<select id="getSearchKeywordList" resultType="KeywordVO">
 		select * from tb_keyword 
		where datediff(now(),regdate) &lt; 2
		order by count desc, regdate desc
		limit 10
 	</select>
 	
<!--  	List<SongVO> getHighRatedSongs() throws Exception; -->

<!-- 	List<AlbumVO> getHighRatedAlbums() throws Exception; -->

<!-- 	List<ArtistVO> getHighRatedArtists() throws Exception; -->
	<!-- 고평점 노래 10개 -->
	<select id="getHighRatedSongs" resultType="SongVO">
		select * 
		from (select song_key, avg(star_point) as avg_point ,count(song_key) as count
			from tb_recommend
			group by song_key
			having count>1
			order by avg(star_point) desc
			) R
		join tb_song a
		on a.song_key = R.song_key
		order by R.avg_point desc
		limit 10
	</select>
	<!-- 고평점 앨범 10개 -->
	<select id="getHighRatedAlbums" resultType="AlbumVO">
		select * 
		from (select album_key, avg(star_point) as avg_point ,count(album_key) as count
			from tb_recommend
			group by album_key
			having count>1
			order by avg(star_point) desc
			) R
		join tb_album a
		on a.album_key = R.album_key
		order by R.avg_point desc
		limit 10
	</select>
	<!-- 고평점 아티스트 10개 -->
	<select id="getHighRatedArtists" resultType="ArtistVO">
		select * 
		from (select artist_key, avg(star_point) as avg_point ,count(artist_key) as count
			from tb_recommend
			group by artist_key
			having count(artist_key)>1
			order by avg(star_point) desc
			) R
		join tb_artist a
		on a.artist_key = R.artist_key
		order by R.avg_point desc
		limit 10
	</select>
	<!-- 고평점 아티스트 기본 장르별 -->
	<select id="getHighRatedArtistsDefault" resultType="ArtistVO" parameterType="String">
		select * 
	from (select r.user_no, r.artist_key, avg(r.star_point) as avg_point ,count(r.artist_key) as count
		from tb_recommend r
		group by r.artist_key
		having count(r.artist_key)>1 
		order by avg(r.star_point) desc	
		) R
	join tb_artist a
	on a.artist_key = R.artist_key
	where a.genre_names like CONCAT('%',#{genre},'%') 
	order by R.avg_point desc
	</select>
	<!-- 고평점 아티스트에서 유저가 평가하지 않은 기본 장르별 -->
	<select id="getHighRatedArtistsUser" parameterType="map" resultType="ArtistVO">
		select * 
		from (select r.user_no, r.artist_key, avg(r.star_point) as avg_point ,count(r.artist_key) as count
			from tb_recommend r
			group by r.artist_key
			having count(r.artist_key)>3 and r.user_no != #{user_no}
			order by avg_point,count desc	
			) R
		join tb_artist a
		on a.artist_key = R.artist_key
		where a.genre_names like CONCAT('%',#{genre},'%')  
		order by R.avg_point desc 
		limit 10
	</select>
	
	<!-- xxx년대 히트송 가수별 -->
	<select id='getXCenturySongs' parameterType="String" resultType="SongVO">
		select * from tb_song ori
		join (select min(song_key) as song_key,artist_key,artist_name 
				from tb_song where is_hit_song and issue_date like CONCAT(#{year} ,'%')
				group by artist_key
				order by rand()) sub
		on sub.song_key = ori.song_key
		limit 30
	</select>
	
	<!-- 별점 순위 -->
	<select id="getRecommendRank" resultType="java.util.HashMap">
		select u.user_id,u.user_nick,r.user_no,count(r.user_no) as count
		from tb_recommend r
			join tb_user u
			on u.user_no = r.user_no
		group by r.user_no
		order by count desc
		limit 10
	</select>
	
	<!-- 19금-_- -->
	<select id="getAdultSongList" resultType="SongVO">
		select * from tb_song ori
		join (select min(song_key) as song_key,artist_key,artist_name from tb_song where is_adult
		group by artist_key
		order by rand()) sub
		on sub.song_key = ori.song_key
		limit 30
	</select>
	<!-- 서바이벌 프로그램 -->
	
	<select id="getSurvivalSongList" resultType="SongVO">
		select * from tb_song
		where 
		album_name like '%Produce 101%' or
		album_name like '%쇼미더머니%' or
		album_name like '%서바이벌 나는 가수다%' or
		album_name like '%복면가왕%' or
		album_name like '%슈퍼스타k%' or
		album_name like '%보이스코리아%'
		order by rand()
		limit 32
	</select>	
	
	<!-- 권우 추가 -->
	<!--  나라별 갯수-->
	<select id="recommend_State_Count" parameterType="java.util.Map" resultType="long">
	select count(*)
	from (select artist_key, avg(star_point)
	 	from tb_user U join tb_recommend R 
	 	on U.user_id != #{user_id}
 	 	and U.user_no = R.user_no	 
	 	group by R.artist_key
	 	having avg(star_point)>=4.0) G 
	 join tb_artist A
	 on G.artist_key = A.artist_key
	 and (A.nationality_name = #{keyword}	 
	 or A.nationality_name = #{keyword2}
	 or A.nationality_name = #{keyword3}
	 or A.nationality_name = #{keyword4}
	 or A.nationality_name = #{keyword5}
	 or A.nationality_name = #{keyword6}
	 or A.nationality_name = #{keyword7}
	 or A.nationality_name = #{keyword8}
	 or A.nationality_name = #{keyword9}
	 or A.nationality_name = #{keyword10}
	 or A.nationality_name = #{keyword11}
	 or A.nationality_name = #{keyword12}
	 or A.nationality_name = #{keyword13}
	 )	 
	 join tb_song S
	 on A.artist_key = S.artist_key
	</select>
	<!--  나라별 리스트 출력-->
	<select id="recommend_State_List" parameterType="java.util.Map" resultType="SongVO">
	select J.*
	from (select @rownum:=@rownum+1 as rownum, S.*	
      	  from (select artist_key, avg(star_point)
	 			from tb_user U join tb_recommend R 
	 			on U.user_id != #{user_id}
 	 			and U.user_no = R.user_no	 
	 			group by R.artist_key
	 			having avg(star_point)>=4.0) G join (select @rownum := 0) r	 	
	 	  join tb_artist A
	 	  on G.artist_key = A.artist_key
	  	  and (A.nationality_name = #{keyword}	 
	 	  or A.nationality_name = #{keyword2}
	 	  or A.nationality_name = #{keyword3}
	 	  or A.nationality_name = #{keyword4}
	 	  or A.nationality_name = #{keyword5}
	 	  or A.nationality_name = #{keyword6}
	 	  or A.nationality_name = #{keyword7}
	 	  or A.nationality_name = #{keyword8}
	 	  or A.nationality_name = #{keyword9}
	 	  or A.nationality_name = #{keyword10}
	 	  or A.nationality_name = #{keyword11}
	 	  or A.nationality_name = #{keyword12}
	 	  or A.nationality_name = #{keyword13}
	 )
	 	  join tb_song S
	   	  on A.artist_key = S.artist_key	 		
	order by issue_date desc) J
	where rownum between #{start_num} and #{end_num}	  
	</select>
	
	<!--  그룹별 갯수-->
	<select id="recommend_Group_Count" parameterType="java.util.Map" resultType="long">
	select count(*)
	from (select artist_key, avg(star_point)
	 	from tb_user U join tb_recommend R 
	 	on U.user_id != #{user_id}
 	 	and U.user_no = R.user_no	 
	 	group by R.artist_key
	 	having avg(star_point)>=4.0) G 
	 join tb_artist A
	 on G.artist_key = A.artist_key
	 and (act_type_name= '그룹'
	 and sex = #{keyword}
	 )	 
	 join tb_song S
	 on A.artist_key = S.artist_key
	</select>
	<!--  그룹별 리스트 출력-->
	<select id="recommend_Group_List" parameterType="java.util.Map" resultType="SongVO">
	select J.*
	from (select @rownum:=@rownum+1 as rownum, S.*	
      	  from (select artist_key, avg(star_point)
	 			from tb_user U join tb_recommend R 
	 			on U.user_id != #{user_id}
 	 			and U.user_no = R.user_no	 
	 			group by R.artist_key
	 			having avg(star_point)>=4.0) G join (select @rownum := 0) r	 	
	 	  join tb_artist A
	 	  on G.artist_key = A.artist_key
	  	  and (act_type_name= '그룹'
	 	  and sex = #{keyword}
		  )	
	 	  join tb_song S
	   	  on A.artist_key = S.artist_key	 		
	order by issue_date desc) J
	where rownum between #{start_num} and #{end_num}	  
	</select>
	
	<!--  솔로별 갯수-->
	<select id="recommend_Solo_Count" parameterType="java.util.Map" resultType="long">
	select count(*)
	from (select artist_key, avg(star_point)
	 	from tb_user U join tb_recommend R 
	 	on U.user_id != #{user_id}
 	 	and U.user_no = R.user_no	 
	 	group by R.artist_key
	 	having avg(star_point)>=4.0) G 
	 join tb_artist A
	 on G.artist_key = A.artist_key
	 and (act_type_name= '솔로'
	 and sex = #{keyword}
	 )	 
	 join tb_song S
	 on A.artist_key = S.artist_key
	</select>
	<!--  솔로별 리스트 출력-->
	<select id="recommend_Solo_List" parameterType="java.util.Map" resultType="SongVO">
	select J.*
	from (select @rownum:=@rownum+1 as rownum, S.*	
      	  from (select artist_key, avg(star_point)
	 			from tb_user U join tb_recommend R 
	 			on U.user_id != #{user_id}
 	 			and U.user_no = R.user_no	 
	 			group by R.artist_key
	 			having avg(star_point)>=4.0) G join (select @rownum := 0) r	 	
	 	  join tb_artist A
	 	  on G.artist_key = A.artist_key
	  	  and (act_type_name= '솔로'
	 	  and sex = #{keyword}
		  )	
	 	  join tb_song S
	   	  on A.artist_key = S.artist_key	 		
	order by issue_date desc) J
	where rownum between #{start_num} and #{end_num}	  
	</select>
	
	<!--  키워드별 갯수-->
	<select id="recommend_Keyword_Count" parameterType="java.util.Map" resultType="long">
	select count(*)
	from (select artist_key, avg(star_point)
	 	from tb_user U join tb_recommend R 
	 	on U.user_id != #{user_id}
 	 	and U.user_no = R.user_no	 
	 	group by R.artist_key
	 	having avg(star_point)>=4.0) G 
	 join tb_artist A
	 on G.artist_key = A.artist_key		 
	 join tb_song S
	 on A.artist_key = S.artist_key
	 and (S.song_name like #{keywordA}
	   	  or S.song_name like #{keywordB}
	   	  or S.song_name like #{keywordC})
	</select>
	<!--  키워드별 리스트 출력-->
	<select id="recommend_Keyword_List" parameterType="java.util.Map" resultType="SongVO">
	select J.*
	from (select @rownum:=@rownum+1 as rownum, S.*	
      	  from (select artist_key, avg(star_point)
	 			from tb_user U join tb_recommend R 
	 			on U.user_id != #{user_id}
 	 			and U.user_no = R.user_no	 
	 			group by R.artist_key
	 			having avg(star_point)>=4.0) G join (select @rownum := 0) r	 	
	 	  join tb_artist A
	 	  on G.artist_key = A.artist_key	  	  
	 	  join tb_song S
	   	  on A.artist_key = S.artist_key
	   	  and (S.song_name like #{keywordA}
	   	  	   or S.song_name like #{keywordB}
	   	  	   or S.song_name like #{keywordC})	 		
	order by issue_date desc) J
	where rownum between #{start_num} and #{end_num}	  
	</select>
	
	<!--  선호 가수 갯수-->
	<select id="recommend_Singer_Count" parameterType="java.util.Map" resultType="long">
	select count(*)
	from(select S1.song_key, S1.artist_key, S1.song_name			     			  	  
	 	from(select count(artist_key) as countA, artist_key
	     	from tb_user U1 join tb_recommend R1 
			 on U1.user_id = #{user_id}
 		 	and U1.user_no = R1.user_no
 		 	group by artist_key
		 	order by countA desc
		 	limit 5)G1		 
		join tb_song S1
		on S1.artist_key = G1.artist_key) G2
	where G2.song_key not in (select R2.song_key
	     				  	  from tb_user U2 join tb_recommend R2 
		 				  	  on U2.user_id = #{user_id}
 		 				  	  and U2.user_no = R2.user_no)
	</select>
	<!--  선호 가수 리스트 출력-->
	<select id="recommend_Singer_List" parameterType="java.util.Map" resultType="SongVO">
	select J.*
	from (select @rownum:=@rownum+1 as rownum, G2.*
		  from(select S1.song_key, S1.artist_key, S1.song_name, S1.issue_date, S1.album_name, S1.artist_name, S1.album_img			     			  	  
	 			from(select count(artist_key) as countA, artist_key
	     			from tb_user U1 join tb_recommend R1 
			 		on U1.user_id = #{user_id}
 		 			and U1.user_no = R1.user_no
 		 			group by artist_key
		 			order by countA desc
		 			limit 5) G1	join (select @rownum := 0) r	 	 
			join tb_song S1
			on S1.artist_key = G1.artist_key) G2
	where G2.song_key not in (select R2.song_key
	     				  	  from tb_user U2 join tb_recommend R2 
		 				  	  on U2.user_id = #{user_id}
 		 				  	  and U2.user_no = R2.user_no) 		
	order by G2.issue_date desc) J
	where rownum between #{start_num} and #{end_num}	  
	</select>
	
	<!--  선호 플레이타임 갯수-->
	<select id="recommend_playTime_Count" parameterType="java.util.Map" resultType="long">
	select count(*)
	from tb_song S1
	where substring(S1.play_time,1,2)*10 in (select substring(truncate(avg(G2.play_time),0),1,2)*10
										 	 from (select S2.play_time
										   			from (select R1.song_key	  							 	 	 
	 							 	  	  	  			  from tb_user U1 
	 							 	  	  	  			  join tb_recommend R1
	 								  	  	  		  	  on U1.user_id = #{user_id}
 									  	  	  		  	  and U1.user_no = R1.user_no) G1
 								 	 	   			join tb_song S2 
 								 	 	   			on S2.song_key = G1.song_key) G2) 
 	and S1.song_key not in (select count(*)
 						 	from (select R2.song_key
	     			 	 		  from tb_user U2 join tb_recommend R2 
		 			 	 		  on U2.user_id = #{user_id}
 		 			 	 	      and U2.user_no = R2.user_no) G3
 		 			 	 	join tb_song S3
 		 			 	 	on S3.song_key = G3.song_key)
	</select>
	<!--  선호 플레이타임 리스트 출력-->
	<select id="recommend_playTime_List" parameterType="java.util.Map" resultType="SongVO">
	select J.*
	from (select @rownum:=@rownum+1 as rownum, S1.*	
		  from tb_song S1 join (select @rownum := 0) r
		  where substring(S1.play_time,1,2)*10 in (select substring(truncate(avg(G2.play_time),0),1,2)*10
										 	 		from (select S2.play_time
										   				  from (select R1.song_key	  							 	 	 
	 							 	  	  	  			  		from tb_user U1 
	 							 	  	  	  			  		join tb_recommend R1
	 								  	  	  		  	  		on U1.user_id = #{user_id}
 									  	  	  		  	  		and U1.user_no = R1.user_no) G1 
 								 	 	   				join tb_song S2 
 								 	 	   				on S2.song_key = G1.song_key) G2) 
 		and S1.song_key not in (select G3.song_key
 						 		from (select R2.song_key
	     			 	 		  	  from tb_user U2 join tb_recommend R2 
		 			 	 		   	  on U2.user_id = #{user_id}
 		 			 	 	      	  and U2.user_no = R2.user_no) G3 
 		 			 	 		join tb_song S3
 		 			 	 		on S3.song_key = G3.song_key) 		 				  	  	
	order by issue_date desc) J
	where rownum between #{start_num} and #{end_num}	  
	</select>
	
	<!--  선호 출시연도 갯수-->
	<select id="recommend_issueDate_Count" parameterType="java.util.Map" resultType="long">
	select count(*)				     			  									 	  
	from(select *
		from(select count(substring(issue_date,1,4)) as countD, substring(issue_date,1,4) as YYYY			     			  	  
		 	 from( select R1.song_key
	    	 		from tb_user U1 join tb_recommend R1 
				 	on U1.user_id = #{user_id}
 		 			and U1.user_no = R1.user_no) G1		 
	 		join tb_song S1
	 		on S1.song_key = G1.song_key
	 		group by issue_date
	 		order by countD desc	 
	 		limit 5 ) G2
		join tb_song S2
		on substring(S2.issue_date,1,4) = YYYY) G3	  
	where G3.song_key not in (select R2.song_key
	     				  	  from tb_user U2 join tb_recommend R2 
		 				  	  on U2.user_id = #{user_id}
 		 				  	  and U2.user_no = R2.user_no)
	</select>
	<!--  선호 출시연도 리스트 출력-->
	<select id="recommend_issueDate_List" parameterType="java.util.Map" resultType="SongVO">
	select J.*
	from (select @rownum:=@rownum+1 as rownum, G3.*	
		  from(select S2.song_key, S2.artist_key, S2.song_name, S2.issue_date, S2.album_name, S2.artist_name, S2.album_img 			     			  									 	  
				from(select count(substring(issue_date,1,4)) as countD, substring(issue_date,1,4) as YYYY			     			  	  
		 	 		 from(select R1.song_key
	    	 			  from tb_user U1 join tb_recommend R1 
				 			on U1.user_id = #{user_id}
 		 					and U1.user_no = R1.user_no) G1	join (select @rownum := 0) r		 
	 				join tb_song S1
	 				on S1.song_key = G1.song_key
	 				group by issue_date
	 				order by countD desc	 
	 				limit 5 ) G2
				join tb_song S2
				on substring(S2.issue_date,1,4) = YYYY) G3	 	 
			where G3.song_key not in (select R2.song_key
	     				  	  		  from tb_user U2 join tb_recommend R2 
		 				  	 		  on U2.user_id = #{user_id}
 		 				  	  		 and U2.user_no = R2.user_no)		 				  	  	
	order by G3.issue_date desc) J
	where rownum between #{start_num} and #{end_num}	  
	</select>
	
	
	<select id="getTotalCommentCount" resultType="long" parameterType="RecommendVO">
		select count(*)
		from tb_recommend
		where song_key = #{song_key} and album_key = #{album_key} and user_comment is not null
	</select>	
	
	
	<select id="getRecommendCount" resultType="long" parameterType="long">
		select count(star_point) as cnt
		from tb_recommend
		where user_no =  #{user_no}
	</select>
	
	<select id="getUserRecommendTotalCount" resultType="long" parameterType="long">
		select count(song_key)
		from tb_recommend
		where user_no = #{user_no}
	</select>
	
	
</mapper>
 
 
